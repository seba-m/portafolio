{"version":3,"sources":["app.js","gsapTypeIt.js","scripts.js"],"names":["document","addEventListener","querySelectorAll","forEach","enlace","e","preventDefault","querySelector","target","attributes","href","value","scrollIntoView","behavior","barra","IntersectionObserver","entries","isIntersecting","classList","remove","add","observe","navegacionFija","gsapTypeIt","this","el","cursor","wordIndex","wordIndexLength","defaults","elClass","rotateWords","rotateWordsOptions","wordsList","cycle","clear","clearingDuration","clear_background","clear_color","original_background","original_color","append","pause","word","cursorSign","autoPlay","delay","charterPerSecond","duration","easing","Linear","easeNone","arguments","options","extendDefaults","buildGsapTypeIt","call","source","properties","property","hasOwnProperty","Date","nodeType","Array","isArray","setCurstorClassName","className","setCharterPerSecondDuration","cps","length","HTMLcursor","op","createElement","parentNode","insertBefore","nextSibling","innerHTML","type","prototype","oldClass","ease","words","TweenLite","delayedCall","textContent","to","text","onComplete","typeRotationCompleted","onCompleteParams","console","log","that","rotateWordsOp","set","background","color","clearCompleted","getElementById"],"mappings":"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","file":"bundle.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\r\n    scrollNav();\r\n\r\n    navegacionFija();\r\n});\r\n\r\nfunction navegacionFija() {\r\n\r\n    const barra = document.querySelector('.header');\r\n\r\n    // registrar el intersection observer\r\n    const observer = new IntersectionObserver(function (entries) {\r\n        if (entries[0].isIntersecting) {\r\n            barra.classList.remove('fijo');\r\n        } else {\r\n            barra.classList.add('fijo');\r\n        }\r\n    });\r\n    // elemento a observar\r\n    observer.observe(document.querySelector('#me'));\r\n}\r\n\r\nfunction scrollNav() {\r\n    const enlaces = document.querySelectorAll('.navegacion-principal a');\r\n\r\n    enlaces.forEach(function (enlace) {\r\n        enlace.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            const seccion = document.querySelector(e.target.attributes.href.value);\r\n            seccion.scrollIntoView({\r\n                behavior: 'smooth'\r\n            });\r\n        });\r\n    });\r\n}","'use strict';\r\n\r\n\r\nvar gsapTypeIt = function () {\r\n    // Create global element references\r\n    this.el = null;\r\n    this.cursor = null;\r\n    this.wordIndex = 0;\r\n    this.wordIndexLength = 0;\r\n    // Define option defaults\r\n    var defaults = {\r\n        el: null,\r\n        elClass: '',\r\n        rotateWords: false,\r\n        rotateWordsOptions: {\r\n            wordsList: [],\r\n            cycle: false,\r\n            clear: false,\r\n            clearingDuration: 2,\r\n            clear_background: '#000',\r\n            clear_color: '#fff',\r\n            original_background: 'transparent',\r\n            original_color: '#000',\r\n            append: false,\r\n            pause: false,\r\n        },\r\n        word: \"\",\r\n        cursorSign: \"|\",\r\n        autoPlay: true,\r\n        delay: 2,\r\n        charterPerSecond: false,\r\n        duration: 1.5,\r\n        easing: Linear.easeNone\r\n    }\r\n\r\n    // Create options by extending defaults with the passed in arugments\r\n    if (arguments[0] && typeof arguments[0] === \"object\") {\r\n        this.options = extendDefaults(defaults, arguments[0]);\r\n    }\r\n\r\n    buildGsapTypeIt.call(this);\r\n\r\n\r\n}\r\n\r\n// Private Methods\r\n\r\nfunction extendDefaults(source, properties) {\r\n    var property;\r\n\r\n    for (property in properties) {\r\n        if (properties.hasOwnProperty(property)) {\r\n            if (typeof properties[property] === 'object' && properties[property] !== null && !(properties[property] instanceof Date) && typeof properties[property].nodeType === 'undefined' && !Array.isArray(properties[property]) && property !== 'easing') {\r\n                extendDefaults(source[property], properties[property]);\r\n            } else {\r\n                source[property] = properties[property];\r\n            }\r\n        }\r\n    }\r\n\r\n    return source;\r\n}\r\n\r\n\r\n// Public Methods\r\n\r\ngsapTypeIt.prototype.type = function () {\r\n\r\n    var op = this.options,\r\n        el = op.el,\r\n        delay = op.delay,\r\n        ease = op.easing,\r\n        duration = op.duration,\r\n        cps = op.charterPerSecond,\r\n        word = op.word,\r\n        rotateWordsOptions = op.rotateWordsOptions,\r\n        words = rotateWordsOptions.wordsList,\r\n        wordIndex = this.wordIndex,\r\n        oldClass;\r\n\r\n\r\n\r\n    TweenLite.delayedCall(0, setCurstorClassName, [this.cursor, \"blink\"]);\r\n    TweenLite.delayedCall(delay, setCurstorClassName, [this.cursor, \" \"]);\r\n\r\n    if (!this.options.rotateWords) {\r\n        console.log(cps);\r\n        if (cps) {\r\n            duration = setCharterPerSecondDuration(word, cps);\r\n        }\r\n        TweenLite.to(el, duration, { text: { value: word }, delay: delay, ease: ease, onComplete: setCurstorClassName, onCompleteParams: [this.cursor, 'blink'] });\r\n\r\n    } else {\r\n        this.wordIndex = wordIndex;\r\n\r\n        if (cps) {\r\n            duration = setCharterPerSecondDuration(words[this.wordIndex], cps);\r\n        }\r\n\r\n\r\n        if (rotateWordsOptions.append && wordIndex > 0) {\r\n\r\n            word = el.textContent + words[this.wordIndex];\r\n            oldClass = '';\r\n\r\n        } else {\r\n\r\n            word = words[this.wordIndex];\r\n            oldClass = 'old';\r\n        }\r\n\r\n        TweenLite.to(el, duration, { text: { value: word, oldClass: oldClass }, delay: delay, ease: ease, onComplete: this.typeRotationCompleted, onCompleteParams: [this] });\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\ngsapTypeIt.prototype.typeRotationCompleted = function (that) {\r\n\r\n    setCurstorClassName(that.cursor, 'blink');\r\n\r\n    if (that.wordIndex >= that.wordIndexLength - 1) {\r\n        if (that.options.rotateWordsOptions.cycle) {\r\n            that.wordIndex = 0;\r\n        } else {\r\n            return;\r\n        }\r\n    } else {\r\n        that.wordIndex++;\r\n    }\r\n    if (that.options.rotateWordsOptions.clear) {\r\n        that.clear();\r\n        return false;\r\n    }\r\n    if (that.options.rotateWordsOptions.pause) {\r\n        return false;\r\n    }\r\n\r\n    that.type(that.el);\r\n}\r\ngsapTypeIt.prototype.clear = function () {\r\n    var rotateWordsOp = this.options.rotateWordsOptions;\r\n\r\n    TweenLite.set(this.el, { background: rotateWordsOp.clear_background, color: 'white', delay: rotateWordsOp.clearingDuration / 2 });\r\n    TweenLite.delayedCall(rotateWordsOp.clearingDuration / 2, setCurstorClassName, [this.cursor, \"hide\"]);\r\n\r\n    TweenLite.set(this.el, { text: { value: \"\" }, background: rotateWordsOp.original_background, color: rotateWordsOp.original_color, delay: rotateWordsOp.clearingDuration });\r\n    TweenLite.delayedCall(rotateWordsOp.clearingDuration, setCurstorClassName, [this.cursor, \"blink\"]);\r\n\r\n    if (!rotateWordsOp.pause) {\r\n        var that = this;\r\n        TweenLite.delayedCall(rotateWordsOp.clearingDuration, this.type, [], that);\r\n    }\r\n}\r\n\r\ngsapTypeIt.prototype.clearCompleted = function () {\r\n\r\n}\r\n\r\nfunction setCurstorClassName(cursor, className) {\r\n    // cursor.className = \" \";\r\n    cursor.className = \"gsapCursor \" + className;\r\n}\r\n\r\nfunction setCharterPerSecondDuration(word, cps) {\r\n    return word.length / cps;\r\n}\r\n\r\nfunction gsapTypeItError(message) {\r\n    this.message = message;\r\n    this.name = \"gsapTypeItError s\";\r\n}\r\n\r\nfunction buildGsapTypeIt() {\r\n    var HTMLcursor, op;\r\n    op = this.options;\r\n    this.el = op.el;\r\n\r\n    if (this.options.elClass) {\r\n        this.el.className = op.elClass;\r\n    }\r\n    if (op.rotateWords) {\r\n        this.wordIndexLength = op.rotateWordsOptions.wordsList.length;\r\n\r\n    }\r\n\r\n    HTMLcursor = document.createElement(\"span\");\r\n    HTMLcursor.className = 'gsapCursor blink';\r\n    this.el.parentNode.insertBefore(HTMLcursor, this.el.nextSibling);\r\n    HTMLcursor.innerHTML = this.options.cursorSign;\r\n    this.cursor = HTMLcursor;\r\n\r\n    if (op.autoPlay) {\r\n        this.type();\r\n    }\r\n\r\n}\r\n","var rotating = new gsapTypeIt({\r\n    el: document.getElementById('messages'),\r\n    rotateWords: true,\r\n    duration: 1.7,\r\n    rotateWordsOptions: {\r\n        wordsList: [\"Programmer\", \"Back-end Developer\", \"Front-end Developer\", \"Freelancer\", \"Android Developer\"],\r\n        cycle: true,\r\n        clear: true\r\n    }\r\n});"]}