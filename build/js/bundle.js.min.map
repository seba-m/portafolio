{"version":3,"sources":["app.js","gsapTypeIt.js","scripts.js","PageScroll.js"],"names":["document","addEventListener","querySelectorAll","forEach","enlace","e","preventDefault","querySelector","target","attributes","href","value","scrollIntoView","behavior","gsapTypeIt","this","el","cursor","wordIndex","wordIndexLength","defaults","elClass","rotateWords","rotateWordsOptions","wordsList","cycle","clear","clearingDuration","clear_background","clear_color","original_background","original_color","append","pause","word","cursorSign","cursorSignOptions","autoPlay","delay","charterPerSecond","duration","easing","Linear","easeNone","arguments","options","extendDefaults","buildGsapTypeIt","call","source","properties","property","hasOwnProperty","Date","nodeType","Array","isArray","setCursorClassName","className","TweenLite","set","background","color","setCharterPerSecondDuration","cps","length","HTMLcursor","op","createElement","parentNode","insertBefore","nextSibling","innerHTML","type","prototype","oldClass","ease","words","cursorOp","delayedCall","textContent","to","text","onComplete","typeRotationCompleted","onCompleteParams","console","log","that","rotateWordsOp","clearCompleted","getElementById","[object Object]","selector","opts","$root","$sections","$up","$down","level","bound","isAnimating","setup","arrows","controlColor","container","id","classList","appendChild","index","nav","add","j","remove","renderNav","elem","style","transition","animDuration","transitionTimingFunction","moveup","bind","movedown","event","deltaY","i","moveto","setActive","transform","setTimeout","pos","movingTo"],"mappings":"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","file":"bundle.js","sourcesContent":["document.addEventListener('DOMContentLoaded', function () {\r\n    scrollNav();\r\n});\r\n\r\nfunction scrollNav() {\r\n    const enlaces = document.querySelectorAll('.navegacion-principal a');\r\n\r\n    enlaces.forEach(function (enlace) {\r\n        enlace.addEventListener('click', function (e) {\r\n            e.preventDefault();\r\n\r\n            const seccion = document.querySelector(e.target.attributes.href.value);\r\n            seccion.scrollIntoView({\r\n                behavior: 'smooth'\r\n            });\r\n        });\r\n    });\r\n}","'use strict';\r\n\r\n\r\nvar gsapTypeIt = function () {\r\n    // Create global element references\r\n    this.el = null;\r\n    this.cursor = null;\r\n    this.wordIndex = 0;\r\n    this.wordIndexLength = 0;\r\n    // Define option defaults\r\n    var defaults = {\r\n        el: null,\r\n        elClass: '',\r\n        rotateWords: false,\r\n        rotateWordsOptions: {\r\n            wordsList: [],\r\n            cycle: false,\r\n            clear: false,\r\n            clearingDuration: 2,\r\n            clear_background: '#000',\r\n            clear_color: '#fff',\r\n            original_background: 'transparent',\r\n            original_color: '#000',\r\n            append: false,\r\n            pause: false,\r\n        },\r\n        word: \"\",\r\n        cursorSign: \"|\",\r\n        cursorSignOptions: {\r\n            original_background: 'transparent',\r\n            original_color: '#000',\r\n        },\r\n        autoPlay: true,\r\n        delay: 2,\r\n        charterPerSecond: false,\r\n        duration: 1.5,\r\n        easing: Linear.easeNone\r\n    }\r\n\r\n    // Create options by extending defaults with the passed in arugments\r\n    if (arguments[0] && typeof arguments[0] === \"object\") {\r\n        this.options = extendDefaults(defaults, arguments[0]);\r\n    }\r\n\r\n    buildGsapTypeIt.call(this);\r\n\r\n\r\n}\r\n\r\n// Private Methods\r\n\r\nfunction extendDefaults(source, properties) {\r\n    var property;\r\n\r\n    for (property in properties) {\r\n        if (properties.hasOwnProperty(property)) {\r\n            if (typeof properties[property] === 'object' && properties[property] !== null && !(properties[property] instanceof Date) && typeof properties[property].nodeType === 'undefined' && !Array.isArray(properties[property]) && property !== 'easing') {\r\n                extendDefaults(source[property], properties[property]);\r\n            } else {\r\n                source[property] = properties[property];\r\n            }\r\n        }\r\n    }\r\n\r\n    return source;\r\n}\r\n\r\n\r\n// Public Methods\r\n\r\ngsapTypeIt.prototype.type = function () {\r\n\r\n    var op = this.options,\r\n        el = op.el,\r\n        delay = op.delay,\r\n        ease = op.easing,\r\n        duration = op.duration,\r\n        cps = op.charterPerSecond,\r\n        word = op.word,\r\n        rotateWordsOptions = op.rotateWordsOptions,\r\n        words = rotateWordsOptions.wordsList,\r\n        wordIndex = this.wordIndex,\r\n        oldClass,\r\n        cursorOp = op.cursorSignOptions;\r\n\r\n\r\n\r\n    TweenLite.delayedCall(0, setCursorClassName, [this.cursor, \"blink\", cursorOp]);\r\n    TweenLite.delayedCall(delay, setCursorClassName, [this.cursor, \" \", cursorOp]);\r\n\r\n    if (!this.options.rotateWords) {\r\n        console.log(cps);\r\n        if (cps) {\r\n            duration = setCharterPerSecondDuration(word, cps);\r\n        }\r\n        TweenLite.to(el, duration, { text: { value: word }, delay: delay, ease: ease, onComplete: setCursorClassName, onCompleteParams: [this.cursor, 'blink', cursorOp] });\r\n\r\n    } else {\r\n        this.wordIndex = wordIndex;\r\n\r\n        if (cps) {\r\n            duration = setCharterPerSecondDuration(words[this.wordIndex], cps);\r\n        }\r\n\r\n\r\n        if (rotateWordsOptions.append && wordIndex > 0) {\r\n\r\n            word = el.textContent + words[this.wordIndex];\r\n            oldClass = '';\r\n\r\n        } else {\r\n\r\n            word = words[this.wordIndex];\r\n            oldClass = 'old';\r\n        }\r\n\r\n        TweenLite.to(el, duration, { text: { value: word, oldClass: oldClass }, delay: delay, ease: ease, onComplete: this.typeRotationCompleted, onCompleteParams: [this, this.options] });\r\n\r\n    }\r\n}\r\n\r\ngsapTypeIt.prototype.typeRotationCompleted = function (that, options) {\r\n\r\n    var cursorOp = options.cursorSignOptions;\r\n\r\n    setCursorClassName(that.cursor, 'blink', cursorOp);\r\n\r\n    if (that.wordIndex >= that.wordIndexLength - 1) {\r\n        if (that.options.rotateWordsOptions.cycle) {\r\n            that.wordIndex = 0;\r\n        } else {\r\n            return;\r\n        }\r\n    } else {\r\n        that.wordIndex++;\r\n    }\r\n    if (that.options.rotateWordsOptions.clear) {\r\n        that.clear();\r\n        return false;\r\n    }\r\n    if (that.options.rotateWordsOptions.pause) {\r\n        return false;\r\n    }\r\n\r\n    that.type(that.el);\r\n}\r\n\r\ngsapTypeIt.prototype.clear = function () {\r\n    var rotateWordsOp = this.options.rotateWordsOptions;\r\n    var cursorOp = this.options.cursorSignOptions;\r\n\r\n    TweenLite.set(this.el, { background: rotateWordsOp.clear_background, color: rotateWordsOp.clear_color, delay: rotateWordsOp.clearingDuration / 2 });\r\n    TweenLite.delayedCall(rotateWordsOp.clearingDuration / 2, setCursorClassName, [this.cursor, \"hide\", cursorOp]);\r\n\r\n    TweenLite.set(this.el, { text: { value: \"\" }, background: rotateWordsOp.original_background, color: rotateWordsOp.original_color, delay: rotateWordsOp.clearingDuration });\r\n    TweenLite.delayedCall(rotateWordsOp.clearingDuration, setCursorClassName, [this.cursor, \"blink\", cursorOp]);\r\n\r\n    if (!rotateWordsOp.pause) {\r\n        var that = this;\r\n        TweenLite.delayedCall(rotateWordsOp.clearingDuration, this.type, [], that);\r\n    }\r\n}\r\n\r\ngsapTypeIt.prototype.clearCompleted = function () {\r\n\r\n}\r\n\r\nfunction setCursorClassName(cursor, className, options) {\r\n    // cursor.className = \" \";\r\n    cursor.className = \"gsapCursor \" + className;\r\n    if (options) {\r\n        TweenLite.set(cursor, { background: options.original_background, color: options.original_color });\r\n    }\r\n}\r\n\r\nfunction setCharterPerSecondDuration(word, cps) {\r\n    return word.length / cps;\r\n}\r\n\r\nfunction gsapTypeItError(message) {\r\n    this.message = message;\r\n    this.name = \"gsapTypeItError s\";\r\n}\r\n\r\nfunction buildGsapTypeIt() {\r\n    var HTMLcursor, op;\r\n    op = this.options;\r\n    this.el = op.el;\r\n\r\n    if (this.options.elClass) {\r\n        this.el.className = op.elClass;\r\n    }\r\n\r\n    if (op.rotateWords) {\r\n        this.wordIndexLength = op.rotateWordsOptions.wordsList.length;\r\n    }\r\n\r\n    HTMLcursor = document.createElement(\"span\");\r\n    HTMLcursor.className = 'gsapCursor blink';\r\n    this.el.parentNode.insertBefore(HTMLcursor, this.el.nextSibling);\r\n    HTMLcursor.innerHTML = this.options.cursorSign;\r\n    this.cursor = HTMLcursor;\r\n\r\n    if (op.autoPlay) {\r\n        this.type();\r\n    }\r\n\r\n}\r\n","new gsapTypeIt({\r\n    el: document.getElementById('messages'),\r\n    rotateWords: true,\r\n    duration: 1.7,\r\n    rotateWordsOptions: {\r\n        wordsList: [\"programmer\", \"back-end developer\", \"front-end developer\", \"freelancer\", \"android developer\"],\r\n        cycle: true,\r\n        clear: true,\r\n        clear_background: '#3297FD',\r\n        clear_color: '#fff',\r\n        original_background: 'transparent',\r\n        original_color: '#fff',\r\n    },\r\n    cursorSignOptions: {\r\n        original_background: 'transparent',\r\n        original_color: '#fff',\r\n    }\r\n});\r\n\r\nnew PageScroll('#pagescroll', {\r\n    animDuration: 500, // 2 seconds\r\n    easing: 'cubic-bezier(.17,.67,.83,.67)', //animation easing\r\n    controlColor: '#ccc', // color of navigation arrows\r\n    nav: [\r\n        document.getElementById('home'),\r\n        document.getElementById('about'),\r\n        document.getElementById('projects'),\r\n        document.getElementById('contact')\r\n    ]\r\n})\r\n","class PageScroll {\r\n    constructor(selector, opts) {\r\n        this.$root = document.querySelector(selector)\r\n        this.$sections = this.$root.querySelectorAll('.section')\r\n        this.opts = opts\r\n        this.$up = null\r\n        this.$down = null\r\n        this.level = 0\r\n        this.bound = this.$sections.length\r\n        this.isAnimating = false\r\n        this.setup()\r\n    }\r\n    renderNav() {\r\n        let arrows =\r\n            `<svg id='control-up' width=\"40\" height=\"35\" viewBox=\"0 0 40 35\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M17.4019 1.5C18.5566 -0.5 21.4434 -0.5 22.5981 1.5L39.0526 30C40.2073 32 38.7639 34.5 36.4545 34.5H3.54552C1.23612 34.5 -0.207259 32 0.947441 30L17.4019 1.5Z\" fill=\"${this.opts.controlColor || 'white'}\"/>\r\n            </svg>\r\n            <svg id='control-down' width=\"40\" height=\"35\" viewBox=\"0 0 40 35\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M17.4019 1.5C18.5566 -0.5 21.4434 -0.5 22.5981 1.5L39.0526 30C40.2073 32 38.7639 34.5 36.4545 34.5H3.54552C1.23612 34.5 -0.207259 32 0.947441 30L17.4019 1.5Z\" fill=\"${this.opts.controlColor || 'white'}\"/>\r\n            </svg>\r\n            `\r\n        let container = document.createElement(\"div\")\r\n        container.id = container.classList = 'controllers'\r\n        container.innerHTML = arrows\r\n        this.$root.appendChild(container)\r\n    }\r\n    setActive(index) {\r\n        this.opts.nav[index].classList.add('active-link')\r\n        for (let j = 0; j < this.opts.nav.length; j++) {\r\n            if (index != j) {\r\n                this.opts.nav[j].classList.remove('active-link')\r\n            }\r\n        }\r\n    }\r\n    setup() {\r\n        this.renderNav()\r\n        this.$up = document.querySelector('#control-up')\r\n        this.$down = document.querySelector('#control-down')\r\n        this.$sections.forEach(elem => elem.style.transition = `transform ${+this.opts.animDuration / 1000 + 's' || '0.3s'}`)\r\n        this.$sections.forEach(elem => elem.style.transitionTimingFunction = this.opts.easing ? this.opts.easing : 'linear')\r\n        this.moveup = this.moveup.bind(this)\r\n        this.movedown = this.movedown.bind(this)\r\n        this.$up.addEventListener('click', this.moveup)\r\n        this.$down.addEventListener('click', this.movedown)\r\n        this.$root.addEventListener('wheel', (event) => {\r\n            if (event.deltaY > 0) this.movedown()\r\n            else this.moveup()\r\n        })\r\n        if (this.opts.nav) {\r\n            for (let i = 0; i < this.opts.nav.length; i++) {\r\n                this.opts.nav[i].addEventListener('click', () => {\r\n                    this.moveto(i)\r\n                    this.setActive(i)\r\n                })\r\n            }\r\n        }\r\n    }\r\n    moveup() {\r\n        if (this.level != 0 && !this.isAnimating) {\r\n            this.isAnimating = true\r\n            this.level--\r\n            this.$sections.forEach(elem => elem.style.transform = `translateY(${-this.level * 100}%)`)\r\n            setTimeout(() => { this.isAnimating = false }, this.opts.animDuration || 300)\r\n            this.setActive(this.level)\r\n        }\r\n    }\r\n    movedown() {\r\n        if ((this.level) + 1 < this.bound && !this.isAnimating) {\r\n            this.isAnimating = true\r\n            this.level++\r\n            this.$sections.forEach(elem => elem.style.transform = `translateY(${-this.level * 100}%)`)\r\n            setTimeout(() => { this.isAnimating = false }, this.opts.animDuration || 300)\r\n            this.setActive(this.level)\r\n\r\n        }\r\n    }\r\n    moveto(pos) {\r\n        if (pos >= 0 && pos <= this.bound) {\r\n            let movingTo = this.level - pos\r\n            this.$sections.forEach(elem => elem.style.transform = `translateY(${(movingTo - this.level) * 100}%)`)\r\n            this.level = pos\r\n        }\r\n    }\r\n}\r\n"]}